Metadata-Version: 2.1
Name: cwruxr-sdk
Version: 1.1.2
Summary: CWRUXR SDK
Home-page: UNKNOWN
Author: IC
Author-email: hwe2@case.edu
License: UNKNOWN
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3
Classifier: Operating System :: OS Independent
License-File: LICENSE

# CWRUXR Python SDK
This repository contains a python wrapper to the CWRUXR api.

# Change History
- v1.1.1 (6/14/2023)
    -Updated examples and readme for clarity of Endpoint/Room/Anchor input.
- v1.1.0 (5/16/2023)
    - Client now uses a session, making requests after the first one faster.
    - Added new examples for text, lines, and threaded animation.
- v1.0.1 (2/10/2023)
    - Updated to use OrJson package (Make sure to install orjson from pip)
    - Adjusted samples to point to cwruxr, and readme to to show where to put your instance.
    - Adjusted samples to communicate with the v2 api.
- v1.0.0 (1/30/2023)
    - Initial release

# Setting up the Project
## Install the SDK
1. Download the zip from the most recent release.
2. From your python environment, install the package from the zip.
    - pip install /path/cwruxr_sdk-x.y.z.zip
    - pip install orjson

## Using the SDK
### Overview
This sdk is split into a few different files which work together and must be imported into your python script to be useful.
``` python
from cwruxr_sdk.common import *
from cwruxr_sdk.client import *
from cwruxr_sdk.object_message import *
from cwruxr_sdk.anchor_message import *
from cwruxr_sdk.material_message import *
```
### Common
The *common* script contains useful functions and methods used by the other scripts. To interact with other scripts, you will often need to create instances of Vector2, Vector3, Quaternion, or Color.
### Client
The *client* class is a wrapper for the CWRUXR api, and will expose methods to get, post, and delete objects, anchors, and materials. All interactions with this SDK will involve creating a client.
### Object Message
The *object_message* script contains classes that represent visual elements in your experience. While you can make an ObjectMessage, this script also supplies ContainerMessage, PrimitiveMessage, TextMessage, LineMessage, FileMessage, and ImageMessage to automatically configure properties for easier usage. Also included in these files are enumerations of primitive and line types to prevent typos for source strings.
### Anchor Message
The *Anchor_Message* script contains AnchorMessage, which allows you to read or modify anchors placed within a room. While you don't need to use any of these classes, as you will generally create anchors before you run your experience, you can still sample anchors to see if they exist or are already placed.
### Material Message
The *material_message* script contains MaterialMessage, which can be used to modify the appearance of objects in the experience. These messages can be referenced by their ID with the ObjectMessage's materialID field. UnlitMaterialMessage and MRTKMaterialMessage are provided as easy to use classes which will automatically fill in some parameters.
# Examples
Full code for each example is included in the Examples folder.
## Create a cwruxrClient
In order to interact with CWRUXR, you will first need to create a client instance. A client is an API wrapper which exposes all of the ways you can interact with the CWRUXR api.
1. Create your imports
```python
from cwruxr_sdk.client import Client
```
In this case, we just need to import the client class.
2. Decide what endpoint, roomID, and anchorID you wish to use, and declare them as constants.
```python
ENDPOINT = "https://[yourinstance]/api/v2/"
ROOM_ID = "[yourroom]"
ANCHOR_ID = "[youranchor]"
```
These values will all be used in the constructor for the client for configuration.

3. Create a client using the constants declared previously.
```python
cwruxrClient = Client(ENDPOINT, ROOM_ID, ANCHOR_ID)
```

4. Use the client
```python
allObjects = cwruxrClient.GetAllObjects()
print(allObjects)
```
As an example, this will get all objects in the current room, at the current anchor, and print them.

## Creating Primitive Objects
To create objects you need to create object messages and call a post message on a client. For this example, we will be using the PrimitiveMessage types which allows you to create cubes, spheres, or any number of other simple objects.
1. Import everything you need from the SDK
```python
from cwruxr_sdk.client import Client
from cwruxr_sdk.common import Pose, Vector3, Quaternion
from cwruxr_sdk.object_message import PrimitiveMessage, PRIMITIVE_CUBE
```
I've imported "PRIMITIVE_CUBE" here, but alongside this are many other shapes to choose from if you wish.
2. Create a client
```python
ENDPOINT = "https://[yourinstance]/api/v2/"
ROOM_ID = "[yourroom]"
ANCHOR_ID = "[youranchor]"

cwruxrClient = Client(ENDPOINT, ROOM_ID, ANCHOR_ID)
```
4. Create Object Messages
```python
cube = PrimitiveMessage(
    id = "cube1",
    source = PRIMITIVE_CUBE,
    pose = Pose(
        position = Vector3(0, 1.25, 0),
        rotation = Quaternion(0,0,0,1),
        scale= Vector3(.1,.1,.1)),
    isManipulationOn = True,
)
```
Constructors such as the Primitive Message constructor used here make use of default values for any unused parameters, but can be modified if you are looking for more specific behavior.

5. Post Messages
```python
createResponse = cwruxrClient.PostObject(cube)
```
You should now see a cube 1.25 meters above Anchor1 in Room IC on the cwruxr server, and that cube is movable.

6. Clean up objects
```python
input("Press Enter to Delete")

deleteResponse = cwruxrClient.DeleteObject(cube.id)
```
The program will now wait for an input, and then delete the object we just created.

## Creating and Assigning Materials
Materials can be assigned to objects in order to change their appearance. In this example, we will create a material message with the MRTK shader, load a texture from a website, and make it appear metallic.

1. Import everything you need from the SDK
```python
from cwruxr_sdk.client import Client
from cwruxr_sdk.common import Pose, Vector3, Vector2, Quaternion, Color
from cwruxr_sdk.object_message import PrimitiveMessage, PRIMITIVE_SPHERE
from cwruxr_sdk.material_message import MRTKMaterialMessage, MRTKStandardParameters, TextureReference, MaterialRenderSettings, MaterialBlending
from cwruxr_sdk.material_message import BLEND_ONE, BLEND_ZERO
```
We are now importing from the material_message. Included in these imports are MRTKMaterialMessage which extends MaterialMessages to provide an easy way to make a material with the MRTK shader. MRTKStandardParameters, TextureReference, MaterialRenderSettings, and MaterialBlending are all needed for the MRTKMaterialMessage constructor. BLEND_ONE and BLEND_ZERO are string constants used in MaterialBlending.

2. Create the CWRUXR Client
```python
ENDPOINT = "https://[yourinstance]/api/v2/"
ROOM_ID = "[yourroom]"
ANCHOR_ID = "[youranchor]"

cwruxrClient = Client(ENDPOINT, ROOM_ID, ANCHOR_ID)
```

3. Create a Material Message
```python
metalMaterial = MRTKMaterialMessage(
    id = "metalMat",
    color = Color(64,64,64,255),
    parameters = MRTKStandardParameters(
        metallic = 1,
        smoothness = .75,
        texture = TextureReference(
            source = "https://upload.wikimedia.org/wikipedia/commons/thumb/b/b4/Grey_textured_cast_finish_clean_rough_seamless_metal_sheet_surface_texture.jpg/600px-Grey_textured_cast_finish_clean_rough_seamless_metal_sheet_surface_texture.jpg?20220827044816",
            tiling = Vector2(1,1),
            offset = Vector2(0,0)
        )
    ),
    render_settings= MaterialRenderSettings(
        blending = MaterialBlending(
            srcBlend = BLEND_ONE,
            dstBlend = BLEND_ZERO
        ),
        zwrite = True,
        cull = "Back",
        render_queue = 2000
    )
)
```
This is a complicated step, so lets break it down into steps
### Colors
A color is defined by 4 components, r, g, b, and a. This class is defined in the Common script. In this case, we are defining a gray color as the base look of the material.
### Parameters
Parameters define shader-specific options to apply to your material. Since we are making an MRTK material, we also imported the MRTKStandardParameters. One input to the MRTK parameters constructor is a Texture Reference
### Texture Reference
A texture reference tells CWRUXR to fetch an image from a url. This "source" can be anywhere on the web, including a file that you upload ane make accessible. In this case, we are pulling a texture from wikipedia.

Tiling and Offset dictate how to render this image. In this case, tiling is set to (1,1) and offset is (0,0) which means that we are not doing anything special.

### Render Settings
These settings are shared across all shaders, and dictate how Unity will choose to render any objects with the material. 

Blending modes will change how the object renders relative to the background. To keep it simple, you should probably use (srcBlend=BLEND_ONE, dstBlend=BLEND_ZERO) for opaque materials, and (srcBlend=BLEND_SRC_ALPHA, dstBlend=BLEND_ONE_MINUS_DST_ALPHA) for transparent materials.

ZWrite determines if the depth channel should be written to. In general, this should be True for opaque materials and False for transparent materials.

Cull Mode lets the renderer decide what to do with front and backfaces. Generally "Back" will be used, but the other options are "Front" and "Off".

Render Queue can be used to change the order that objects are rendered. In general, this value should be around 2000 for opaque objects, and around 3000 for transparent objects.

4. Post the Material Message
```python
cwruxrClient.PostMaterial(metalMaterial)
```
Material messages are posted just like objects. A post will create a new material for the room, or override an existing material if one exists with the same ID.

5. Assign the Material to an Object
```python
sphere = PrimitiveMessage(
    id = "sphere1",
    source = PRIMITIVE_SPHERE,
    pose = Pose(
        position = Vector3(0, 1.25, 0),
        rotation = Quaternion(0,0,0,1),
        scale= Vector3(.25,.25,.25)),
    isManipulationOn = True,
    materialID = metalMaterial.id,
)

cwruxrClient.PostObject(sphere)
```
This works just like the previous example, except that we are now setting the MaterialID to the same ID as the newly created material. Make sure that you posted the Material before posting the object or it will appear incorrectly.

6. Clean up the Scene
```python
input("Press Enter to Delete")

deleteResponse = cwruxrClient.DeleteAllObjects()
deleteResponse = cwruxrClient.DeleteAllMaterials()
```
Finally, we need to remove any created objects and materials. The DeleteAll methods will remove all associated messages even if you don't keep track of the IDs to use. Be aware, that if any other controllers create objects at the same anchor, the DeleteAll methods will destroy those as well. Materials are unique to the Room, so be aware that DeleteAllMaterials doesn't just affect the anchor that you are connected to.

## Loading Files
Most projects will involve loading custom assets. CWRUXR has the ability to load 2d images and 3d models
1. Import Everything you need from the CWRUXR SDK
```python
from cwruxr_sdk.client import Client
from cwruxr_sdk.common import Pose, Vector3, Quaternion, Euler
from cwruxr_sdk.object_message import FileMessage, ContainerMessage, Interpolation, ImageMessage, ImageParameters
```
In this example, we will be using three new types of object message: Containers, Files, and Images.

2. Create the Client
```python
ENDPOINT = "https://[yourinstance]/api/v2/"
ROOM_ID = "[yourroom]"
ANCHOR_ID = "[youranchor]"

cwruxrClient = Client(ENDPOINT, ROOM_ID, ANCHOR_ID)
```

3. Create a container
```python
terrain_parent = ContainerMessage(
    id = "example_parent",
    type = "Container",
    pose = Pose(
        position = Vector3(0,0,0),
        rotation = Quaternion(0,0,0,1),
        scale = Vector3(1,1,1)
    ),
    active = True,
    isManipulationOn = False,
    interpolation = Interpolation(
        moveSpeed = 15,
        rotateSpeed = 15,
        scaleSpeed = 15
    )
)
```
A container object is an object with no visual appearance. These are helpful for creating groups of objects which can be manipulated or animated as a set. In this case, this will serve as a parent object for the other two objects that we create so we can choose to scale or move everything as a whole.

4. Load a 3d model file
```python
terrain = FileMessage(
    id = "terrain",
    parentID = "example_parent",
    source = "http://url.to.terrain.fbx",
    active = True,
    walkable =  True,
    pose = Pose(
        position = Vector3(0,-0.5,0),
        rotation = Quaternion(0,0,0,1),
        scale = Vector3(1,1,1)
    )
)
```
Often, you will want to load a 3d model file to display something created in another platform. You will need to host the file in some location such as dropbox or google drive and make it accessible, but then a direct link in the source field of the FileMessage should cause the object to load into your room.

5. Load a 2d image file
```python
map = ImageMessage(
    id = "map",
    parentID = "example_parent",
    source = "http://url.to.map.png",
    pose = Pose(
        position = Vector3(0,1,0),
        rotation = Euler(90,0,0),
        scale = Vector3(0.5,0.5,0.5)
    ),
    params = ImageParameters(
        updateRate = 0.1
    )
)
```
In addition to 3d objects, sometimes you will want to load 2d images. This is accomplished with Image Messages which take a url to any image on the internet. Like with 3d files you can host your own on dropbox or google drive, but this can even be a link to an image from wikipedia or google image search or anything else you find.

6. Bulk post all objects
```python
cwruxrClient.PostObjectBulk([terrain_parent, terrain, map])
```
Rather then posting each object individually, the PostObjectBulk operation will let you post a list of objects at the same time.

7. Clean up all objects
```python
input("Press Enter to Delete")

deleteResponse = cwruxrClient.DeleteAllObjects()
```
Finally, we need to remove any created objects. The DeleteAll method will remove all objects that we created at this anchor.

## Rendering Text
To display text in your project, you can make use of the Text type objects.
1. Import everything you need from the cwruxr sdk
```python
from cwruxr_sdk.common import *
from cwruxr_sdk.object_message import *
from cwruxr_sdk.client import *
```

2. Create the Client
```python
ENDPOINT = "https://[yourinstance]/api/v2/"
ROOM_ID = "[yourroom]"
ANCHOR_ID = "[youranchor]"

cwruxrClient : Client = Client(ENDPOINT, ROOM_ID, ANCHOR_ID)
```

3. Create a Text Object
```python
text_object = TextMessage(
    id = "end1",
    pose = Pose(
        position=Vector3(0,1,0),
        euler=Vector3(0,0,0),
        scale=Vector3(1,1,1)
    ),
    active = True,
    params = TextParameters(
        text = "Hello World",
        fontSize = 1,
        width= 2,
        height= 1,
        color= Color(255,255,0,255)
    )
)

cwruxrClient.PostObject(text_object)
```
A TextMessage is a type of object which displays as written text. When you create a message, you must provide TextParameters which dictate the text displayed, font size, bounding box, and color. The bounding box size will adjust when text will overflow to display on the next line.

4. Clean up the object
```python
input("Press Enter to Delete")

deleteResponse = cwruxrClient.DeleteAllObjects()
```
Finally, we can delete the object when we are done with it.

## Line Objects
Line objects are a type of object which doesn't render based on a pose, but based on a start and and end point.
1. Import cwruxr_sdk and create a client
```python
from cwruxr_sdk.common import *
from cwruxr_sdk.object_message import *
from cwruxr_sdk.client import *

ENDPOINT = "https://[yourinstance]/api/v2/"
ROOM_ID = "[yourroom]"
ANCHOR_ID = "[youranchor]"

cwruxrClient : Client = Client(ENDPOINT, ROOM_ID, ANCHOR_ID)
```
2. Create start and end objects.
```python
end1 = PrimitiveMessage(
    id = "end1",
    source = PRIMITIVE_SPHERE,
    materialID = "Lit:White",
    pose = Pose(Vector3(0,1,-1),scale=Vector3(.1,.1,.1)),
    isManipulationOn=True
)
end2 = PrimitiveMessage(
    id = "end2",
    source = PRIMITIVE_SPHERE,
    materialID = "Lit:White",
    pose = Pose(Vector3(0,1,1),scale=Vector3(.1,.1,.1)),
    isManipulationOn=True
)
```
These can be any type of object, but in this case they are spheres that are manipulatable. Line objects are not static, and will render dynamically as you move these objects such that it will always connect the two ends.

3. Create the line object
```python
line = LineMessage(
    id = "line1",
    source = LINE_CYLINDER,
    params= LineParameters(
        startId="end1",
        endId="end2",
        width=0.01,
    ),
)
cwruxrClient.PostObjectBulk([end1,end2,line])
```
Line objects are a little different, in that you don't need to specify a pose. Instead, in LineParameters you can specify the startID and endID, which will reference already created objects similarly to how you would use the parentID.
For a line you can also specify the source which works similarly to primitives; LINE_CYLINDER in this case will make the line render as a cylinder. Not specifying a source will have the line display as a camera facing quad.
In addition, you can specify the width in meters for the line to appear.

4. Clean up
```python
input("Press Enter to Delete")

deleteResponse = cwruxrClient.DeleteAllObjects()
```

## Threading and Animation
While not the only way to handle animating objects, using threads can be helpful in dividing up tasks within your code. This example shows a way to handle a simple loop
1. Import what you need, and create a client
```python
from cwruxr_sdk.common import *
from cwruxr_sdk.object_message import *
from cwruxr_sdk.client import *
from threading import Thread
import math
import time

ENDPOINT = "https://[yourinstance]/api/v2/"
ROOM_ID = "[yourroom]"
ANCHOR_ID = "[youranchor]"

cwruxrClient : Client = Client(ENDPOINT, ROOM_ID, ANCHOR_ID)

thread_running = True
```
In this example, we can use python threading to execute a function while we wait for input to stop the application. We are using the math and time libraries to handle a simple animation.

2. Create an function to be called in the thread.
```python
def move_sphere():
    last_time = time.time()
    move_speed = 1
    t = 0
    while(thread_running):
        current_time = time.time()
        time_difference = current_time - last_time

        t += move_speed * time_difference

        sphere = PrimitiveMessage(
            id = "sphere1",
            source = PRIMITIVE_SPHERE,
            pose = Pose(
                position = Vector3(0, math.sin(t) * .5 + 1, 0),
                rotation = Quaternion(0,0,0,1),
                scale= Vector3(.1,.1,.1)),
            isManipulationOn = True,
            interpolation = Interpolation(
                on = True,
                moveSpeed = 5
            )
        )
        
        cwruxrClient.PostObject(sphere)
        last_time = current_time
        time.sleep(.2)
```
For this function, on each iteration we are posting a sphere at a different position. Each time this loop runs, the sphere will move to a slightly different position. This movement can be interpolated by specifying the interpolation settings on the object, in this case this sphere will move towards a target position at a rate of 5.
At the end of the loop, we sleep for 200ms in order to prevent flooding the server. The movement can still be smooth with properly setup interpolation without sending the message too often.

3. Starting and stopping the thread
```python

movement_thread = Thread(target = move_sphere)
movement_thread.start()

input("Press Enter to Delete")

thread_running = False
movement_thread.join()

deleteResponse = cwruxrClient.DeleteAllObjects()
```
Finally, we need to run this function we created. To do so, you should create a Thread object with the target set to the animation method we created earlier. When you call start on the thread, it will run the infinite loop we setup.
Now, after receiving input we also set the thread_running boolean which will halt the loop on the thread, and when that thread is complete the join function will let us know that we are back to a single thread, so we know we can safely delete without creating new objects afterwards.

